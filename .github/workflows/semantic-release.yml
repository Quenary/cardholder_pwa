name: Semantic Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  frontend-tests:
    name: Run Frontend Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install frontend dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:ci

  backend-tests:
    name: Run Backend Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pytest
        run: pytest

  release:
    name: Run Semantic Release
    runs-on: ubuntu-latest
    needs:
      - frontend-tests
      - backend-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run semantic-release
        env:
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  check-tag:
    name: Check Docker Tag
    runs-on: ubuntu-latest
    needs: release
    outputs:
      version: ${{ steps.version.outputs.version }}
      exists: ${{ steps.check_tag.outputs.exists }}
    env:
      IMAGE_NAME: quenary/cardholder_pwa

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch latest refs explicitly
        run: |
          git fetch origin main
          git fetch --tags
          git reset --hard origin/main

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${GITHUB_REF##*/}"
          else
            VERSION=$(git tag --sort=-creatordate | grep '^v[0-9]' | head -n 1)
          fi

          if [ -z "$VERSION" ]; then
            echo "❌ ERROR: No version tag found. Aborting."
            exit 1
          fi

          echo "✅ Using VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if Docker tag already exists
        id: check_tag
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            https://hub.docker.com/v2/repositories/${{ env.IMAGE_NAME }}/tags/${{ steps.version.outputs.version }}/)
          echo "Status: $STATUS"
          if [ "$STATUS" = "200" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: check-tag
    if: needs.check-tag.outputs.version != '' && needs.check-tag.outputs.exists == 'false'
    env:
      IMAGE_NAME: quenary/cardholder_pwa
      VERSION: ${{ needs.check-tag.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and tag Docker image
        run: |
          docker build \
            --build-arg VERSION=${{ env.VERSION }} \
            -t $IMAGE_NAME:${{ env.VERSION }} \
            -t $IMAGE_NAME:latest .

      - name: Push Docker image (${{ env.VERSION }})
        run: docker push $IMAGE_NAME:${{ env.VERSION }}

      - name: Push Docker image (latest)
        run: docker push $IMAGE_NAME:latest